service: serverless-api-nodejs
package:
  exclude:
    - env/**
provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage,'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "s3:*"
      Resource: "*"
functions:
  hello:
    handler: src/lambda.handler
    environment:
      DATABASE: ${file(./env/.env_${self:provider.stage}.json):DATABASE}
      DB_USERNAME: ${file(./env/.env_${self:provider.stage}.json):DB_USERNAME}
      DB_PASSWORD: ${file(./env/.env_${self:provider.stage}.json):DB_PASSWORD}
      DB_ENDPOINT: ${file(./env/.env_${self:provider.stage}.json):DB_ENDPOINT}
      BUCKET_NAME: ${file(./env/.env_${self:provider.stage}.json):BUCKET_NAME}
      CF_DOMAIN: ${file(./env/.env_${self:provider.stage}.json):CF_DOMAIN}
    vpc:
      securityGroupIds:
        - ${file(./env/.env_${self:provider.stage}.json):SECURITY_GROUP_ID}
      subnetIds:
        - ${file(./env/.env_${self:provider.stage}.json):SUBNET_1}
        - ${file(./env/.env_${self:provider.stage}.json):SUBNET_2}
    events:
      - http:
          path: "images"
          method: post
          cors: true
      - http:
          path: "images"
          method: get
          cors: true
      - http:
          path: "images/{id}"
          method: get
          cors: true
      - http:
          path: "images/{id}"
          method: delete
          cors: true
